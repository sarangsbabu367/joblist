openapi: 3.1.0
info:
  title: Joblist api
  version: v1
  contact:
    name: sarang s babu
    url: https://github.com/sarangsbabu367
servers:
  - url: http://127.0.0.1:8000
paths:
  /jobs:
    parameters:
      - $ref: "#/components/parameters/tenant"
    get:
      operationId: job.fetchAll
      description: Fetch all jobs. By default jobs will sorted by created-time in descending.
      responses:
        "200":
          description: A list of jobs.
          $ref: "#/components/responses/jobs"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "401":
          description: Un authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "403":
          description: Un authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "404":
          description: Un authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
  /jobs/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/tenant"
    patch:
      operationId: job.update
      description: Update job's applied property. A user wont be able to perform any other operation on job.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - isApplied
              additionalProperties: false
              properties:
                isApplied:
                  type: boolean
      responses:
        "204":
          description: A no content response.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "401":
          description: Un authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "403":
          description: Un authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "404":
          description: Un authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
components:
  schemas:
    errorModel:
      type: object
      description: Error response format.
      properties:
        errors:
          type: array
          items:
            type: object
            additionalProperties: false
            required:
              - status
              - code
              - title
              - detail
            properties:
              id:
                type: string
                description: A unique identifier for this particular occurrence of the problem.
              status:
                type: string
                description: The HTTP status code applicable to this problem.
                enum:
                  - "400"
                  - "401"
                  - "403"
                  - "404"
                  - "500"
              code:
                type: string
                description: An application-specific error code, expressed as a string value.
              title:
                type: string
                description: A short, human-readable summary of the problem that SHOULD NOT change
                             from occurrence to occurrence of the problem, except for purposes of localization.
              detail:
                type: string
                description: A human-readable explanation specific to this occurrence of the problem.
                             Like title, this field's value can be localized.
              source:
                type: object
                additionalProperties: false
                description: An object containing references to the source of the error,
                             optionally including `pointer` or `parameter`.
                properties:
                  pointer:
                    type: string
                    description: A JSON Pointer [RFC6901] to the associated entity in the request document
                                 [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
                  parameter:
                    type: string
                    description: A string indicating which URI query parameter caused the error.
              meta:
                type: object
                description: Meta data about the error.
    jobs:
      description: A list of job.
      type: array
      items:
       $ref: "#/components/schemas/job"
    job:
      description: A single job.
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - company
        - expectedExperienceInYears
        - locations
        - createdTime
        - shortJobDescription
        - shortCompanyDescription
        - fullJobDescription
        - isApplied
      properties:
        id:
          type: string
        name:
          type: string
          maxLength: 1000
          minLength: 1
        company:
          type: string
          maxLength: 500
          minLength: 1
        expectedExperienceInYears:
          type:
            - string
            - null
          pattern: ([0-9]+-[0-9]+)|([1-9]+\+)
        locations:
          type: string
          description: If multiple locations are available, enter it as a comma separated values.
          example:
            - Banglore
            - Banglore, Chennai, Hyderabad
        createdTime:
          type: string
          description: UTC time. Client has to convert it to user's timzone.
          format: date-time
        shortJobDescription:
          type:
            - string
            - null
          minLength: 1
          maxLength: 1000
          description: A short description about the job.
        shortCompanyDescription:
          type:
            - string
            - null
          minLength: 1
          maxLength: 1000
          description: A short description about the company.
        fullJobDescription:
          type: string
          minLength: 1
          maxLength: 10000
          description: The complete job description.
        isApplied:
          type: boolean
        meta:
          type: object
  responses:
    jobs:
      description: A list of job.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/jobs"
  parameters:
    id:
      name: id
      in: path
      description: Unique `id` of the resource.
      required: true
      schema:
        type: string
        format: '[0-9]+'
    tenant:
      name: tenant
      in: query
      description: Tenant id of the customer.
      required: true
      schema:
        type: string
        format: '[0-9]+'
